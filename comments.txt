Statuses
0. Nothing
1. Paralyzed : 25% speed decrease, 25% paralyzed
2. Poisoned : 1/8th max hp loss per turn, does not affect steel
3. Badly Poisoned : Losses n/16 hp during nth term
4. Burned : 50% attack decrease, loss of 1/8th max hp
5. Frozen : 20% chance thaw out, thawed out automatically from fire
6. Sleep : lasts randomly from 1-5 turns
7. Flinch : ?% chance that pokemon cant do anything this turn
8. Confused : 50% chance of hitting itself with 40 power typeless attack, lasts randomly from 1-4 turns

Game Model

round
	selection
		player1 selection
			1. select a move
			2. chose different pokemon
		player2 selection
			1. select a move
			2. chose different pokemon
	action (may go in either order)
		player1's action
			1. perform a move
			2. switch out
		player2's action
			1. perform a move
			2. switch out
		
switch (input)
			{
				case 1:
				{
					if (place > 0)
					{
						it += "\033[A \r";
						it += all[--place].info.name;
						it += "          \r\n";
						for (int i = 0; i < all[place].info.name.size(); i++)
						{
							it += " ";
						}
						it += " \033[A";
						std::cout << it;
					}
					else
					{
						place = size(all) - 1;
						it += "\033[A \r";
						it += all[place].info.name;
						it += "          \r\n";
						for (int i = 0; i < all[place].info.name.size(); i++)
						{
							it += " ";
						}
						it += " \033[A";
						std::cout << it;
					}

					showStats(all[place]);
					break;
				}
				case 2:
				{
					if (place < size(all) - 1)
					{
						it += "\033[A \r";
						it += all[++place].info.name;
						it += "          \r\n";
						for (int i = 0; i < all[place].info.name.size(); i++)
						{
							it += " ";
						}
						it += " \033[A";
						std::cout << it;
					}
					else
					{
						place = 0;
						it += "\033[A \r";
						it += all[place].info.name;
						it += "          \r\n";
						for (int i = 0; i < all[place].info.name.size(); i++)
						{
							it += " ";
						}
						it += " \033[A";
						std::cout << it;
					}
					showStats(all[place]);
					break;
				}
				case 3:
				{
					arr[j] = all[place];
					j++;

					std::cout << "\r\033[A\033[A\033[A";
					for (int i = 0; i < j; i++)
					{
						std::cout << arr[i].info.name;
						if (i != (j - 1))
						{
							cout << ", ";
						}
					}
					std::cout << "\n\n";

					it += "                        \r";
					it += all[place].info.name;
					it += " ";

					std::cout << it;

					break;
				}
				case 4:
				{
					if (j > 0)
					{
						j--;
					}

					std::cout << "\r\033[A\033[A\033[A                                                             ";
					std::cout << "\r";
					for (int i = 0; i < j; i++)
					{
						std::cout << arr[i].info.name;
						if (i != (j - 1))
						{
							cout << ", ";
						}
					}
					std::cout << "\n\n";

					it += "                        \r";
					it += all[place].info.name;
					it += " ";

					std::cout << it;

					break;
				}
				default:
				{
					it += "\r\033[A                        \r";
					it += all[place].info.name;
					it += " ";

					std::cout << it;
				}
			}
